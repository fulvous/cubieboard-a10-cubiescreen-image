29a30
> #include <linux/i2c-dev.h>
33a35,36
> #include <plat/sys_config.h>
> #include "ctp_platform_ops.h"
42,49c45,52
< #define AUO_PIXCIR_REG_X1_LSB		0x00
< #define AUO_PIXCIR_REG_X1_MSB		0x01
< #define AUO_PIXCIR_REG_Y1_LSB		0x02
< #define AUO_PIXCIR_REG_Y1_MSB		0x03
< #define AUO_PIXCIR_REG_X2_LSB		0x04
< #define AUO_PIXCIR_REG_X2_MSB		0x05
< #define AUO_PIXCIR_REG_Y2_LSB		0x06
< #define AUO_PIXCIR_REG_Y2_MSB		0x07
---
> #define AUO_PIXCIR_REG_X1_LSB		0x40
> #define AUO_PIXCIR_REG_X1_MSB		0x41
> #define AUO_PIXCIR_REG_Y1_LSB		0x42
> #define AUO_PIXCIR_REG_Y1_MSB		0x43
> #define AUO_PIXCIR_REG_X2_LSB		0x44
> #define AUO_PIXCIR_REG_X2_MSB		0x45
> #define AUO_PIXCIR_REG_Y2_LSB		0x46
> #define AUO_PIXCIR_REG_Y2_MSB		0x47
58,62c61,65
< #define AUO_PIXCIR_REG_X_SENSITIVITY	0x6f
< #define AUO_PIXCIR_REG_Y_SENSITIVITY	0x70
< #define AUO_PIXCIR_REG_INT_SETTING	0x71
< #define AUO_PIXCIR_REG_INT_WIDTH	0x72
< #define AUO_PIXCIR_REG_POWER_MODE	0x73
---
> #define AUO_PIXCIR_REG_X_SENSITIVITY	0x67
> #define AUO_PIXCIR_REG_Y_SENSITIVITY	0x68
> #define AUO_PIXCIR_REG_INT_SETTING	0x6e
> #define AUO_PIXCIR_REG_INT_WIDTH	0x6f
> #define AUO_PIXCIR_REG_POWER_MODE	0x70
64c67
< #define AUO_PIXCIR_REG_VERSION		0x77
---
> #define AUO_PIXCIR_REG_VERSION		0xa6
109a113,133
> #define AUO_PIXCIR_I2C_ADDR 0x5c
> 
> #define CTP_IRQ_NO  (gpio_int_info[0].port_num)
> #define CTP_IRQ_MODE  (NEGATIVE_EDGE)
> 
> #ifdef PRINT_INT_INFO
> #define print_int_info(fmt, args...) \
>   do { \
>     pr_info(fmt, ##args); \
>   }while(0)
> #else
> #define print_int_info(fmt, args...) //
> #endif
> 
> static void* __iomem gpio_addr = NULL;
> static user_gpio_set_t gpio_int_info[1];
> static int gpio_int_hdle = 0;
> static int  int_cfg_addr[]={PIO_INT_CFG0_OFFSET,PIO_INT_CFG1_OFFSET,
>     PIO_INT_CFG2_OFFSET, PIO_INT_CFG3_OFFSET};
> 
> static int ctp_set_irq_mode(char *major_key, char *subkey, ext_int_mode int_mode);
130a155,161
> static const unsigned short normal_i2c[] =
>   { AUO_PIXCIR_I2C_ADDR, AUO_PIXCIR_I2C_ADDR + 1, I2C_CLIENT_END };
> 
> struct auo_pixcir_ts_platdata platdata = {7, 0x8, NULL, NULL, 800, 480};
> 
> static struct i2c_client *auo_pixcir_i2c_client; 
> 
267a299
>   int value, count = 0;
271,273c303,313
< 		dev_err(&client->dev, "unable to read reg %Xh, %d\n",
< 			AUO_PIXCIR_REG_POWER_MODE, ret);
< 		return ret;
---
>     while(count<100){
>       ret = i2c_smbus_read_byte_data(client, AUO_PIXCIR_REG_POWER_MODE);
>       if(ret >= 0)
>         break;
>       count++;
>     }
>     if (ret < 0) {
>       dev_err(&client->dev, "unable to read reg %Xh, %d\n",
>         AUO_PIXCIR_REG_POWER_MODE, ret);
>       return ret;
>     }
275a316,317
> 
> printk("Count: %d\n", count);
277d318
< 	ret |= mode;
279,284c320,336
< 	ret = i2c_smbus_write_byte_data(client, AUO_PIXCIR_REG_POWER_MODE, ret);
< 	if (ret) {
< 		dev_err(&client->dev, "unable to write reg %Xh, %d\n",
< 			AUO_PIXCIR_REG_POWER_MODE, ret);
< 		return ret;
< 	}
---
>   value = ret | mode;
>   count = 0;
> printk("Write 0x%x to the address 0x%x\n", value, AUO_PIXCIR_REG_POWER_MODE);
> 
>   ret = i2c_smbus_write_byte_data(client, AUO_PIXCIR_REG_POWER_MODE, value);
>   if(ret<0) {
>     while(count <100) {
>       ret = i2c_smbus_write_byte_data(client, AUO_PIXCIR_REG_POWER_MODE, value);
>       if(ret >= 0)
>         break;
>       count++;
>     }
>     if (ret <0) {
>       dev_err(&client->dev, "unable to write reg %Xh, %d\n",
>         AUO_PIXCIR_REG_POWER_MODE, ret);
>       return ret;
>     }
285a338,340
>   }
> 
> printk("Count: %d\n", count);
492a548,563
>   if(client) {
>     printk("client flags: %d, irq: %d, addr: %d, name: %s\n", client->flags, client->irq, client->addr, client->name);
>   }
>   else
>     printk("client is empty\n");
> 
>   if(!id){
>     printk("id is empty\n");
>   }
> 
>   if(!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
>     return -ENODEV;
>   }
> 
> printk("==auo_pixcir_probe==\n");
> 
495a567
> printk("b1\n");
506a579,591
>   ret = ctp_set_irq_mode("ctp_para", "ctp_int_port", CTP_IRQ_MODE);
>   if(ret<0){
>     pr_info("%s:ctp_ops.set_irq_mode err.\n", __func__);
>     goto err_gpio_int;
>   }
> 
>   ret=request_irq(SW_INT_IRQNO_PIO, auo_pixcir_interrupt, IRQF_SHARED, "auo_pixcir_ts", ts);
>   if(ret<0){
>     dev_err(&client->dev, "auo_pixcir_probe: request irq failed\n");
>     goto err_gpio_int;
>   }
> 
> 
553,557d637
< 	ret = i2c_smbus_read_byte_data(client, AUO_PIXCIR_REG_VERSION);
< 	if (ret < 0)
< 		goto err_fw_vers;
< 	dev_info(&client->dev, "firmware version 0x%X\n", ret);
< 
565c645
< 	ret = request_threaded_irq(client->irq, NULL, auo_pixcir_interrupt,
---
> /*	ret = request_threaded_irq(client->irq, NULL, auo_pixcir_interrupt,
567,568c647,648
< 				   input_dev->name, ts);
< 	if (ret) {
---
> 				   input_dev->name, ts);*/
> /*	if (ret) {
571c651
< 	}
---
> 	}*/
638c718,845
< module_i2c_driver(auo_pixcir_driver);
---
> static struct i2c_board_info __initdata i2c_board_info[] = {
>   {
>     I2C_BOARD_INFO("auo_pixcr_ts", 0x5c),
>     .platform_data = &platdata,
>     .irq = 60,
>   },
> };
> 
> static int __init auo_pixcir_init(void)
> {
>   struct i2c_adapter *i2c_adap;
>   int ret=0;
> printk("a0/n");
> printk("==auo_pixcir_init==\n");
> 
>   ret = i2c_add_driver(&auo_pixcir_driver);
>     if(ret <0) {
>       printk(KERN_ERR "failed to add auo_pixcir driver");
>       goto out;
>     }
> 
>   i2c_adap = i2c_get_adapter(1);
> 
>   auo_pixcir_i2c_client = i2c_new_probed_device(i2c_adap, &(i2c_board_info[0]), normal_i2c, NULL);
> 
>   if(!auo_pixcir_i2c_client){
>     printk(KERN_ERR "failed to connect I2C to auo_pixcir");
>     ret = -ENODEV;
>     goto out_i2c_driver;
>   }
> 
>   i2c_put_adapter(i2c_adap);
> 
>   return 0;
> 
> out_i2c_driver:
>   i2c_del_driver(&auo_pixcir_driver);
> out:
>   return ret;
> }
> 
> static void __exit auo_pixcir_cleanup(void)
> {
>   i2c_del_driver(&auo_pixcir_driver);
> }
> 
> static void ctp_clear_penirq(void)
> {
>   int reg_val;
>   reg_val = readl(gpio_addr + PIO_INT_STAT_OFFSET);
>   if((reg_val = (reg_val&(1<<(CTP_IRQ_NO))))){
>     print_int_info("==CTP_IRQ_NO==\n");
>     writel(reg_val,gpio_addr + PIO_INT_STAT_OFFSET);
>   }
>   return;
> }
> 
> static int ctp_set_irq_mode(char *major_key, char *subkey, ext_int_mode int_mode)
> {
>   int ret = 0;
>   __u32 reg_num=0;
>   __u32 reg_addr=0;
>   __u32 reg_val=0;
> 
>   gpio_addr = ioremap(PIO_BASE_ADDRESS, PIO_RANGE_SIZE);
>   if(!gpio_addr){
>     ret = -EIO;
>     goto exit_ioremap_failed;
>   }
> 
>   pr_info("%s: config gpio to int mode. \n", __func__);
> 
> #ifndef SYSCONFIG_GPIO_ENABLE
> #else
> 
>   if(gpio_int_hdle){
>     gpio_release(gpio_int_hdle, 2);
>   }
>   gpio_int_hdle = gpio_request_ex(major_key, subkey);
>   if(!gpio_int_hdle) {
>     pr_info("request tp_int_port failed. \n");
>     ret = -1;
>     goto request_tp_int_port_failed;
>   }
>   gpio_get_one_pin_status(gpio_int_hdle, gpio_int_info, subkey, 1);
> 
>  pr_info("%s, %d: gpio_int_info, port = %d, port_num = %d. \n", __func__, __LINE__, \
>    gpio_int_info[0].port, gpio_int_info[0].port_num);
> #endif
> 
> #ifdef AW_GPIO_INT_API_ENABLE
> #else
>  pr_info(" INTERRUPT CONFIG\n");
>  reg_num = (gpio_int_info[0].port_num)%8;
>  reg_addr = (gpio_int_info[0].port_num)/8;
>  reg_val = readl(gpio_addr + int_cfg_addr[reg_addr]);
>  reg_val &= (~(7 << (reg_num * 4)));
>  reg_val |= (int_mode << (reg_num * 4));
>  writel(reg_val,gpio_addr+int_cfg_addr[reg_addr]);
> 
>  ctp_clear_penirq();
> 
>  reg_val = readl(gpio_addr+PIO_INT_CTRL_OFFSET);
>  reg_val |= (1 << (gpio_int_info[0].port_num));
>  writel(reg_val,gpio_addr+PIO_INT_CTRL_OFFSET);
> 
>  udelay(1);
> #endif
> 
> request_tp_int_port_failed:
>  return ret;
> 
> exit_ioremap_failed:
>  if(gpio_addr){
>    iounmap(gpio_addr);
>  }
> 
>  if(gpio_int_hdle){
>    gpio_release(gpio_int_hdle, 2);
>  }
> 
>  return ret;
> }
> 
> module_init(auo_pixcir_init);
> module_exit(auo_pixcir_cleanup);
> /*module_i2c_driver(auo_pixcir_driver);*/
> 
